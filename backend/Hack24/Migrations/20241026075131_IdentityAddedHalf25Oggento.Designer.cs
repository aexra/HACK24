// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web.Data.Contexts;

#nullable disable

namespace Hack24.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20241026075131_IdentityAddedHalf25Oggento")]
    partial class IdentityAddedHalf25Oggento
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hack24.Data.Model.SoloChallengeExpPerPlace", b =>
                {
                    b.Property<int>("SoloChallengeId")
                        .HasColumnType("integer");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.HasKey("SoloChallengeId", "Place");

                    b.ToTable("SoloChallengeExpsPerPlace");
                });

            modelBuilder.Entity("Hack24.Data.Models.ChallengeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChallengeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChallengeTypes");
                });

            modelBuilder.Entity("Hack24.Data.Models.CompletedSoloChallenge", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<int>("SoloChallengeId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "SoloChallengeId");

                    b.HasIndex("SoloChallengeId");

                    b.ToTable("CompletedSoloChallenges");
                });

            modelBuilder.Entity("Hack24.Data.Models.ImageForRequestToCompleteSoloChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RequestToCompleteSoloChallengeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestToCompleteSoloChallengeId");

                    b.ToTable("ImagesForRequestToCompleteSoloChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<int>("MinimalExp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Hack24.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Hack24.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Hack24.Data.Models.RepeatForSoloChallenge", b =>
                {
                    b.Property<int>("SoloChallengeId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<byte>("RestPeriodInDays")
                        .HasColumnType("smallint");

                    b.HasKey("SoloChallengeId");

                    b.ToTable("RepeatsForSoloChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.RepeatForSoloSelfChallenge", b =>
                {
                    b.Property<int>("SoloSelfChallengeId")
                        .HasColumnType("integer");

                    b.Property<byte>("RestPeriodInDays")
                        .HasColumnType("smallint");

                    b.HasKey("SoloSelfChallengeId");

                    b.ToTable("RepeatsForSoloSelfChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.RequestToCompleteSoloChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("SoloChallengeId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SoloChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestsToCompleteSoloChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SoloChallengeCatalogId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SoloChallengeCatalogId");

                    b.ToTable("SoloChallenges");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloChallengeCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVoting")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeTypeId");

                    b.ToTable("SoloChallengeCatalog");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloSelfChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SoloSelfChallengeCatalog")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SoloSelfChallengeCatalog");

                    b.ToTable("SoloSelfChallenges");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloSelfChallengeCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SoloSelfChallengeCatalogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Web.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FamilyInviteKey")
                        .HasColumnType("text");

                    b.Property<string>("Hobby")
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Pets")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("VK")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PostId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hack24.Data.Model.SoloChallengeExpPerPlace", b =>
                {
                    b.HasOne("Hack24.Data.Models.SoloChallenge", "SoloChallenge")
                        .WithMany("Exps")
                        .HasForeignKey("SoloChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoloChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.CompletedSoloChallenge", b =>
                {
                    b.HasOne("Hack24.Data.Models.SoloChallenge", "SoloChallenge")
                        .WithMany()
                        .HasForeignKey("SoloChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Data.Models.User", "User")
                        .WithMany("CompletedSoloChallenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoloChallenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hack24.Data.Models.ImageForRequestToCompleteSoloChallenge", b =>
                {
                    b.HasOne("Hack24.Data.Models.RequestToCompleteSoloChallenge", "RequestToCompleteSoloChallenge")
                        .WithMany("Images")
                        .HasForeignKey("RequestToCompleteSoloChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestToCompleteSoloChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.Notification", b =>
                {
                    b.HasOne("Web.Data.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hack24.Data.Models.RepeatForSoloChallenge", b =>
                {
                    b.HasOne("Hack24.Data.Models.SoloChallenge", "SoloChallenge")
                        .WithMany()
                        .HasForeignKey("SoloChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoloChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.RepeatForSoloSelfChallenge", b =>
                {
                    b.HasOne("Hack24.Data.Models.SoloSelfChallenge", "SoloSelfChallenge")
                        .WithMany()
                        .HasForeignKey("SoloSelfChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoloSelfChallenge");
                });

            modelBuilder.Entity("Hack24.Data.Models.RequestToCompleteSoloChallenge", b =>
                {
                    b.HasOne("Hack24.Data.Models.SoloChallenge", "SoloChallenge")
                        .WithMany()
                        .HasForeignKey("SoloChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Data.Models.User", "User")
                        .WithMany("RequestsToCompleteSoloChallenge")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoloChallenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloChallenge", b =>
                {
                    b.HasOne("Hack24.Data.Models.SoloChallengeCatalog", "SoloChallengeCatalog")
                        .WithMany("SoloChallenges")
                        .HasForeignKey("SoloChallengeCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoloChallengeCatalog");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloChallengeCatalog", b =>
                {
                    b.HasOne("Hack24.Data.Models.ChallengeType", "ChallengeType")
                        .WithMany("SoloChallengeCatalogs")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeType");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloSelfChallenge", b =>
                {
                    b.HasOne("Hack24.Data.Models.SoloSelfChallengeCatalog", "Catalog")
                        .WithMany("Challenges")
                        .HasForeignKey("SoloSelfChallengeCatalog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloSelfChallengeCatalog", b =>
                {
                    b.HasOne("Hack24.Data.Models.ChallengeType", "ChallengeType")
                        .WithMany("SoloSelfChallengeCatalogs")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Web.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Web.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Web.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Data.Models.User", b =>
                {
                    b.HasOne("Hack24.Data.Models.Post", "Post")
                        .WithMany("Users")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hack24.Data.Models.ChallengeType", b =>
                {
                    b.Navigation("SoloChallengeCatalogs");

                    b.Navigation("SoloSelfChallengeCatalogs");
                });

            modelBuilder.Entity("Hack24.Data.Models.Post", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hack24.Data.Models.RequestToCompleteSoloChallenge", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloChallenge", b =>
                {
                    b.Navigation("Exps");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloChallengeCatalog", b =>
                {
                    b.Navigation("SoloChallenges");
                });

            modelBuilder.Entity("Hack24.Data.Models.SoloSelfChallengeCatalog", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Web.Data.Models.User", b =>
                {
                    b.Navigation("CompletedSoloChallenges");

                    b.Navigation("Notifications");

                    b.Navigation("RequestsToCompleteSoloChallenge");
                });
#pragma warning restore 612, 618
        }
    }
}
